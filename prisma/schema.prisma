// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id               String    @id @default(cuid())
  email            String    @unique
  emailVerified    DateTime?
  stripeCustomerId String?   @unique
  createdAt        DateTime  @default(now())
  
  accounts    Account[]
  sessions    Session[]
  entitlement Entitlement?
  apiUsage    ApiUsage[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Entitlement {
  userId    String                 @id
  plan      Plan                   @default(free)
  status    EntitlementStatus      @default(inactive)
  features  Json                   @default("{\"docx\": false, \"cover_letter\": false, \"max_req_per_min\": 10}")
  updatedAt DateTime               @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ApiUsage {
  id        String   @id @default(cuid())
  userId    String
  route     String
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model WebhookEvent {
  eventId     String   @id
  processedAt DateTime @default(now())
}

enum Plan {
  free
  pro_monthly
  pro_annual
}

enum EntitlementStatus {
  inactive
  active
  past_due
  canceled
}
