generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                      String                   @id @default(cuid())
  email                   String                   @unique
  name                    String?
  image                   String?
  emailVerified           DateTime?
  stripeCustomerId        String?                  @unique
  createdAt               DateTime                 @default(now())
  password                String?
  accounts                Account[]
  apiUsage                ApiUsage[]
  entitlement             Entitlement?
  sessions                Session[]
  savedResumes            SavedResume[]
  draft                   Draft?
  accountDeletionRequest  AccountDeletionRequest?
  cookiePreferences       Json?
  creditPurchases         CreditPurchase[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Entitlement {
  userId               String            @id
  plan                 Plan              @default(standard)
  status               EntitlementStatus @default(active)
  features             Json              @default("{\"docx\": false, \"cover_letter\": false, \"max_req_per_min\": 10}")
  updatedAt            DateTime          @updatedAt
  expiresAt            DateTime?
  creditBalance        Int               @default(0) // Purchased credit balance for Standard users
  freeCreditsThisMonth Int               @default(6) // Monthly free credits (capped at 6)
  lastMonthlyReset     DateTime?         // Track when free credits were last reset
  user                 User              @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ApiUsage {
  id        String   @id @default(cuid())
  userId    String
  route     String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model WebhookEvent {
  eventId     String   @id
  processedAt DateTime @default(now())
}

model AccountDeletionRequest {
  id              String   @id @default(cuid())
  userId          String   @unique
  requestedAt     DateTime @default(now())
  scheduledFor    DateTime // When the deletion will actually happen (48 hours later)
  cancelled       Boolean  @default(false)
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([scheduledFor]) // For cleanup queries
}

model SavedResume {
  id                String   @id @default(cuid())
  userId            String
  data              Json     // Resume form data
  name              String?  // Optional name for the resume
  template          String   @default("classic")
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  expiresAt         DateTime? // When this resume expires and should be deleted
  isLatest          Boolean  @default(true) // Mark the most recent one
  downloadsRemaining Int     @default(10) // Downloads allowed per generated document
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
  @@index([userId, isLatest])
  @@index([expiresAt]) // For cleanup queries
}

model Draft {
  id        String   @id @default(cuid())
  userId    String   @unique // One draft per user
  data      Json     // Resume form data in progress
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  expiresAt DateTime @default(dbgenerated("now() + interval '30 days'")) // Auto-cleanup after 30 days
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([expiresAt]) // For cleanup queries
}

model TrialUsage {
  id               String   @id @default(cuid())
  ipAddress        String   @unique
  generationsUsed  Int      @default(0)
  downloadsUsed    Int      @default(0)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  @@index([ipAddress])
  @@index([updatedAt]) // For cleanup of old records
}

model CreditPurchase {
  id                String   @id @default(cuid())
  userId            String
  stripePaymentId   String?  @unique // Stripe payment intent ID
  packSize          Int      // Number of credits purchased
  amountPaid        Int      // Amount in cents
  creditsGranted    Int      // Credits actually granted (may differ from packSize due to bonuses)
  status            String   @default("pending") // pending, completed, failed, refunded
  createdAt         DateTime @default(now())
  processedAt       DateTime?
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([stripePaymentId])
  @@index([status])
}

enum Plan {
  free // Keep for migration
  day_pass // Keep for migration - will be migrated to standard
  trial // Anonymous trial users (keep for backward compatibility)
  standard // Logged in users with credit balance
  pro_monthly
  pro_annual
}

enum EntitlementStatus {
  inactive
  active
  past_due
  canceled
}
